'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5444
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5444.
'
Namespace MetroService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MetroServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MetroService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetMetroConfigItemsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMetroConfigItemDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewConfigItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateConfigItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteConfigItemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConfigExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.NFTA_Metro.My.MySettings.Default.NFTA_Metro_MetroService_MetroService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetMetroConfigItemsCompleted As GetMetroConfigItemsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMetroConfigItemDetailsCompleted As GetMetroConfigItemDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewConfigItemCompleted As AddNewConfigItemCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateConfigItemCompleted As UpdateConfigItemCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteConfigItemCompleted As DeleteConfigItemCompletedEventHandler
        
        '''<remarks/>
        Public Event ConfigExistsCompleted As ConfigExistsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMetroConfigItems", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetroConfigItems() As ConfigView()
            Dim results() As Object = Me.Invoke("GetMetroConfigItems", New Object(-1) {})
            Return CType(results(0),ConfigView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetroConfigItemsAsync()
            Me.GetMetroConfigItemsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetroConfigItemsAsync(ByVal userState As Object)
            If (Me.GetMetroConfigItemsOperationCompleted Is Nothing) Then
                Me.GetMetroConfigItemsOperationCompleted = AddressOf Me.OnGetMetroConfigItemsOperationCompleted
            End If
            Me.InvokeAsync("GetMetroConfigItems", New Object(-1) {}, Me.GetMetroConfigItemsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetroConfigItemsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetroConfigItemsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetroConfigItemsCompleted(Me, New GetMetroConfigItemsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMetroConfigItemDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMetroConfigItemDetails(ByVal cId As String) As String()
            Dim results() As Object = Me.Invoke("GetMetroConfigItemDetails", New Object() {cId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMetroConfigItemDetailsAsync(ByVal cId As String)
            Me.GetMetroConfigItemDetailsAsync(cId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMetroConfigItemDetailsAsync(ByVal cId As String, ByVal userState As Object)
            If (Me.GetMetroConfigItemDetailsOperationCompleted Is Nothing) Then
                Me.GetMetroConfigItemDetailsOperationCompleted = AddressOf Me.OnGetMetroConfigItemDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetMetroConfigItemDetails", New Object() {cId}, Me.GetMetroConfigItemDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMetroConfigItemDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMetroConfigItemDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMetroConfigItemDetailsCompleted(Me, New GetMetroConfigItemDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewConfigItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewConfigItem(ByVal key As String, ByVal value As String) As Integer
            Dim results() As Object = Me.Invoke("AddNewConfigItem", New Object() {key, value})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewConfigItemAsync(ByVal key As String, ByVal value As String)
            Me.AddNewConfigItemAsync(key, value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewConfigItemAsync(ByVal key As String, ByVal value As String, ByVal userState As Object)
            If (Me.AddNewConfigItemOperationCompleted Is Nothing) Then
                Me.AddNewConfigItemOperationCompleted = AddressOf Me.OnAddNewConfigItemOperationCompleted
            End If
            Me.InvokeAsync("AddNewConfigItem", New Object() {key, value}, Me.AddNewConfigItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewConfigItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewConfigItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewConfigItemCompleted(Me, New AddNewConfigItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConfigItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateConfigItem(ByVal cId As Integer, ByVal key As String, ByVal value As String)
            Me.Invoke("UpdateConfigItem", New Object() {cId, key, value})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConfigItemAsync(ByVal cId As Integer, ByVal key As String, ByVal value As String)
            Me.UpdateConfigItemAsync(cId, key, value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateConfigItemAsync(ByVal cId As Integer, ByVal key As String, ByVal value As String, ByVal userState As Object)
            If (Me.UpdateConfigItemOperationCompleted Is Nothing) Then
                Me.UpdateConfigItemOperationCompleted = AddressOf Me.OnUpdateConfigItemOperationCompleted
            End If
            Me.InvokeAsync("UpdateConfigItem", New Object() {cId, key, value}, Me.UpdateConfigItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateConfigItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateConfigItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateConfigItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteConfigItem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteConfigItem(ByVal cId As Integer)
            Me.Invoke("DeleteConfigItem", New Object() {cId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigItemAsync(ByVal cId As Integer)
            Me.DeleteConfigItemAsync(cId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteConfigItemAsync(ByVal cId As Integer, ByVal userState As Object)
            If (Me.DeleteConfigItemOperationCompleted Is Nothing) Then
                Me.DeleteConfigItemOperationCompleted = AddressOf Me.OnDeleteConfigItemOperationCompleted
            End If
            Me.InvokeAsync("DeleteConfigItem", New Object() {cId}, Me.DeleteConfigItemOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteConfigItemOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteConfigItemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteConfigItemCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConfigExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConfigExists(ByVal key As String) As Boolean
            Dim results() As Object = Me.Invoke("ConfigExists", New Object() {key})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConfigExistsAsync(ByVal key As String)
            Me.ConfigExistsAsync(key, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConfigExistsAsync(ByVal key As String, ByVal userState As Object)
            If (Me.ConfigExistsOperationCompleted Is Nothing) Then
                Me.ConfigExistsOperationCompleted = AddressOf Me.OnConfigExistsOperationCompleted
            End If
            Me.InvokeAsync("ConfigExists", New Object() {key}, Me.ConfigExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnConfigExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConfigExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConfigExistsCompleted(Me, New ConfigExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ConfigView
        
        Private idField As Integer
        
        Private keyField As String
        
        Private valueField As String
        
        Private lastModifiedField As System.Nullable(Of Date)
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property key() As String
            Get
                Return Me.keyField
            End Get
            Set
                Me.keyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property LastModified() As System.Nullable(Of Date)
            Get
                Return Me.lastModifiedField
            End Get
            Set
                Me.lastModifiedField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMetroConfigItemsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetroConfigItemsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetroConfigItemsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ConfigView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ConfigView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetMetroConfigItemDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetMetroConfigItemDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMetroConfigItemDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewConfigItemCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewConfigItemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewConfigItemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateConfigItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteConfigItemCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ConfigExistsCompletedEventHandler(ByVal sender As Object, ByVal e As ConfigExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConfigExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
