'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5420.
'
Namespace AlertService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="AlertServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AlertService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetAllParentCategoriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPublicParentCategoriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubCategoriesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCategoryDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CategoryExistsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CategoryIsPublicOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlertsByCategoryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlertDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateAlertStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ArchiveAlertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserVerifiedContactsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetContactDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateContactEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteContactOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserSubscriptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSubscriptionDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AddNewSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscriptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscriptionsByContactIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteSubscriptionsByCategoryIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlertTextListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAlertEmailListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserRoleDescriptionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.NFTA_Metro.My.MySettings.Default.NFTA_Metro_AlertService_AlertService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetAllParentCategoriesCompleted As GetAllParentCategoriesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPublicParentCategoriesCompleted As GetPublicParentCategoriesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubCategoriesCompleted As GetSubCategoriesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCategoryDetailsCompleted As GetCategoryDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event CategoryExistsCompleted As CategoryExistsCompletedEventHandler
        
        '''<remarks/>
        Public Event CategoryIsPublicCompleted As CategoryIsPublicCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewCategoryCompleted As AddNewCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCategoryCompleted As UpdateCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCategoryCompleted As DeleteCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlertsByCategoryCompleted As GetAlertsByCategoryCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlertDetailsCompleted As GetAlertDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewAlertCompleted As AddNewAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAlertCompleted As UpdateAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteAlertCompleted As DeleteAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateAlertStatusCompleted As UpdateAlertStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event ArchiveAlertCompleted As ArchiveAlertCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserContactsCompleted As GetUserContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserVerifiedContactsCompleted As GetUserVerifiedContactsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetContactDetailsCompleted As GetContactDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewContactCompleted As AddNewContactCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateContactEmailCompleted As UpdateContactEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateContactCompleted As ValidateContactCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteContactCompleted As DeleteContactCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserSubscriptionsCompleted As GetUserSubscriptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSubscriptionDetailsCompleted As GetSubscriptionDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event AddNewSubscriptionCompleted As AddNewSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSubscriptionCompleted As UpdateSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscriptionCompleted As DeleteSubscriptionCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscriptionsByContactIdCompleted As DeleteSubscriptionsByContactIdCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteSubscriptionsByCategoryIdCompleted As DeleteSubscriptionsByCategoryIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlertTextListCompleted As GetAlertTextListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAlertEmailListCompleted As GetAlertEmailListCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserRoleDescriptionsCompleted As GetUserRoleDescriptionsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserDetailsCompleted As GetUserDetailsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllParentCategories", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllParentCategories() As AlertCategoryView()
            Dim results() As Object = Me.Invoke("GetAllParentCategories", New Object(-1) {})
            Return CType(results(0),AlertCategoryView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllParentCategoriesAsync()
            Me.GetAllParentCategoriesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllParentCategoriesAsync(ByVal userState As Object)
            If (Me.GetAllParentCategoriesOperationCompleted Is Nothing) Then
                Me.GetAllParentCategoriesOperationCompleted = AddressOf Me.OnGetAllParentCategoriesOperationCompleted
            End If
            Me.InvokeAsync("GetAllParentCategories", New Object(-1) {}, Me.GetAllParentCategoriesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllParentCategoriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllParentCategoriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllParentCategoriesCompleted(Me, New GetAllParentCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublicParentCategories", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPublicParentCategories() As AlertCategoryView()
            Dim results() As Object = Me.Invoke("GetPublicParentCategories", New Object(-1) {})
            Return CType(results(0),AlertCategoryView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPublicParentCategoriesAsync()
            Me.GetPublicParentCategoriesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPublicParentCategoriesAsync(ByVal userState As Object)
            If (Me.GetPublicParentCategoriesOperationCompleted Is Nothing) Then
                Me.GetPublicParentCategoriesOperationCompleted = AddressOf Me.OnGetPublicParentCategoriesOperationCompleted
            End If
            Me.InvokeAsync("GetPublicParentCategories", New Object(-1) {}, Me.GetPublicParentCategoriesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPublicParentCategoriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPublicParentCategoriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPublicParentCategoriesCompleted(Me, New GetPublicParentCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubCategories", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubCategories(ByVal parentId As Integer) As AlertCategoryView()
            Dim results() As Object = Me.Invoke("GetSubCategories", New Object() {parentId})
            Return CType(results(0),AlertCategoryView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubCategoriesAsync(ByVal parentId As Integer)
            Me.GetSubCategoriesAsync(parentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubCategoriesAsync(ByVal parentId As Integer, ByVal userState As Object)
            If (Me.GetSubCategoriesOperationCompleted Is Nothing) Then
                Me.GetSubCategoriesOperationCompleted = AddressOf Me.OnGetSubCategoriesOperationCompleted
            End If
            Me.InvokeAsync("GetSubCategories", New Object() {parentId}, Me.GetSubCategoriesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubCategoriesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubCategoriesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubCategoriesCompleted(Me, New GetSubCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCategoryDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCategoryDetails(ByVal catId As Integer) As String()
            Dim results() As Object = Me.Invoke("GetCategoryDetails", New Object() {catId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCategoryDetailsAsync(ByVal catId As Integer)
            Me.GetCategoryDetailsAsync(catId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCategoryDetailsAsync(ByVal catId As Integer, ByVal userState As Object)
            If (Me.GetCategoryDetailsOperationCompleted Is Nothing) Then
                Me.GetCategoryDetailsOperationCompleted = AddressOf Me.OnGetCategoryDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetCategoryDetails", New Object() {catId}, Me.GetCategoryDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCategoryDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCategoryDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCategoryDetailsCompleted(Me, New GetCategoryDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryExists", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CategoryExists(ByVal catName As String, ByVal parentId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CategoryExists", New Object() {catName, parentId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CategoryExistsAsync(ByVal catName As String, ByVal parentId As Integer)
            Me.CategoryExistsAsync(catName, parentId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CategoryExistsAsync(ByVal catName As String, ByVal parentId As Integer, ByVal userState As Object)
            If (Me.CategoryExistsOperationCompleted Is Nothing) Then
                Me.CategoryExistsOperationCompleted = AddressOf Me.OnCategoryExistsOperationCompleted
            End If
            Me.InvokeAsync("CategoryExists", New Object() {catName, parentId}, Me.CategoryExistsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCategoryExistsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CategoryExistsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CategoryExistsCompleted(Me, New CategoryExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryIsPublic", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CategoryIsPublic(ByVal catId As Integer) As Boolean
            Dim results() As Object = Me.Invoke("CategoryIsPublic", New Object() {catId})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CategoryIsPublicAsync(ByVal catId As Integer)
            Me.CategoryIsPublicAsync(catId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CategoryIsPublicAsync(ByVal catId As Integer, ByVal userState As Object)
            If (Me.CategoryIsPublicOperationCompleted Is Nothing) Then
                Me.CategoryIsPublicOperationCompleted = AddressOf Me.OnCategoryIsPublicOperationCompleted
            End If
            Me.InvokeAsync("CategoryIsPublic", New Object() {catId}, Me.CategoryIsPublicOperationCompleted, userState)
        End Sub
        
        Private Sub OnCategoryIsPublicOperationCompleted(ByVal arg As Object)
            If (Not (Me.CategoryIsPublicCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CategoryIsPublicCompleted(Me, New CategoryIsPublicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewCategory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewCategory(ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean) As Integer
            Dim results() As Object = Me.Invoke("AddNewCategory", New Object() {name, parentId, desc, code, ispublic})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewCategoryAsync(ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean)
            Me.AddNewCategoryAsync(name, parentId, desc, code, ispublic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewCategoryAsync(ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean, ByVal userState As Object)
            If (Me.AddNewCategoryOperationCompleted Is Nothing) Then
                Me.AddNewCategoryOperationCompleted = AddressOf Me.OnAddNewCategoryOperationCompleted
            End If
            Me.InvokeAsync("AddNewCategory", New Object() {name, parentId, desc, code, ispublic}, Me.AddNewCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewCategoryCompleted(Me, New AddNewCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCategory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCategory(ByVal catId As Integer, ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("UpdateCategory", New Object() {catId, name, parentId, desc, code, ispublic})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCategoryAsync(ByVal catId As Integer, ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean)
            Me.UpdateCategoryAsync(catId, name, parentId, desc, code, ispublic, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCategoryAsync(ByVal catId As Integer, ByVal name As String, ByVal parentId As Integer, ByVal desc As String, ByVal code As String, ByVal ispublic As Boolean, ByVal userState As Object)
            If (Me.UpdateCategoryOperationCompleted Is Nothing) Then
                Me.UpdateCategoryOperationCompleted = AddressOf Me.OnUpdateCategoryOperationCompleted
            End If
            Me.InvokeAsync("UpdateCategory", New Object() {catId, name, parentId, desc, code, ispublic}, Me.UpdateCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCategoryCompleted(Me, New UpdateCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCategory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteCategory(ByVal catId As Integer)
            Me.Invoke("DeleteCategory", New Object() {catId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCategoryAsync(ByVal catId As Integer)
            Me.DeleteCategoryAsync(catId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteCategoryAsync(ByVal catId As Integer, ByVal userState As Object)
            If (Me.DeleteCategoryOperationCompleted Is Nothing) Then
                Me.DeleteCategoryOperationCompleted = AddressOf Me.OnDeleteCategoryOperationCompleted
            End If
            Me.InvokeAsync("DeleteCategory", New Object() {catId}, Me.DeleteCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCategoryCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlertsByCategory", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlertsByCategory(ByVal categoryId As Integer) As AlertView()
            Dim results() As Object = Me.Invoke("GetAlertsByCategory", New Object() {categoryId})
            Return CType(results(0),AlertView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlertsByCategoryAsync(ByVal categoryId As Integer)
            Me.GetAlertsByCategoryAsync(categoryId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlertsByCategoryAsync(ByVal categoryId As Integer, ByVal userState As Object)
            If (Me.GetAlertsByCategoryOperationCompleted Is Nothing) Then
                Me.GetAlertsByCategoryOperationCompleted = AddressOf Me.OnGetAlertsByCategoryOperationCompleted
            End If
            Me.InvokeAsync("GetAlertsByCategory", New Object() {categoryId}, Me.GetAlertsByCategoryOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlertsByCategoryOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlertsByCategoryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlertsByCategoryCompleted(Me, New GetAlertsByCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlertDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlertDetails(ByVal alertId As String) As String()
            Dim results() As Object = Me.Invoke("GetAlertDetails", New Object() {alertId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlertDetailsAsync(ByVal alertId As String)
            Me.GetAlertDetailsAsync(alertId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlertDetailsAsync(ByVal alertId As String, ByVal userState As Object)
            If (Me.GetAlertDetailsOperationCompleted Is Nothing) Then
                Me.GetAlertDetailsOperationCompleted = AddressOf Me.OnGetAlertDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetAlertDetails", New Object() {alertId}, Me.GetAlertDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlertDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlertDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlertDetailsCompleted(Me, New GetAlertDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewAlert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AddNewAlert(ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean) As Integer
            Dim results() As Object = Me.Invoke("AddNewAlert", New Object() {catId, messageText, messageEmail, endDate, showAlert})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddNewAlertAsync(ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean)
            Me.AddNewAlertAsync(catId, messageText, messageEmail, endDate, showAlert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewAlertAsync(ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean, ByVal userState As Object)
            If (Me.AddNewAlertOperationCompleted Is Nothing) Then
                Me.AddNewAlertOperationCompleted = AddressOf Me.OnAddNewAlertOperationCompleted
            End If
            Me.InvokeAsync("AddNewAlert", New Object() {catId, messageText, messageEmail, endDate, showAlert}, Me.AddNewAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewAlertCompleted(Me, New AddNewAlertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateAlert(ByVal alertId As Integer, ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean)
            Me.Invoke("UpdateAlert", New Object() {alertId, catId, messageText, messageEmail, endDate, showAlert})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlertAsync(ByVal alertId As Integer, ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean)
            Me.UpdateAlertAsync(alertId, catId, messageText, messageEmail, endDate, showAlert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlertAsync(ByVal alertId As Integer, ByVal catId As Integer, ByVal messageText As String, ByVal messageEmail As String, ByVal endDate As String, ByVal showAlert As Boolean, ByVal userState As Object)
            If (Me.UpdateAlertOperationCompleted Is Nothing) Then
                Me.UpdateAlertOperationCompleted = AddressOf Me.OnUpdateAlertOperationCompleted
            End If
            Me.InvokeAsync("UpdateAlert", New Object() {alertId, catId, messageText, messageEmail, endDate, showAlert}, Me.UpdateAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAlertCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteAlert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteAlert(ByVal alertId As Integer)
            Me.Invoke("DeleteAlert", New Object() {alertId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAlertAsync(ByVal alertId As Integer)
            Me.DeleteAlertAsync(alertId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAlertAsync(ByVal alertId As Integer, ByVal userState As Object)
            If (Me.DeleteAlertOperationCompleted Is Nothing) Then
                Me.DeleteAlertOperationCompleted = AddressOf Me.OnDeleteAlertOperationCompleted
            End If
            Me.InvokeAsync("DeleteAlert", New Object() {alertId}, Me.DeleteAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteAlertCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAlertStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateAlertStatus(ByVal alertId As Integer, ByVal statusId As Integer)
            Me.Invoke("UpdateAlertStatus", New Object() {alertId, statusId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlertStatusAsync(ByVal alertId As Integer, ByVal statusId As Integer)
            Me.UpdateAlertStatusAsync(alertId, statusId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateAlertStatusAsync(ByVal alertId As Integer, ByVal statusId As Integer, ByVal userState As Object)
            If (Me.UpdateAlertStatusOperationCompleted Is Nothing) Then
                Me.UpdateAlertStatusOperationCompleted = AddressOf Me.OnUpdateAlertStatusOperationCompleted
            End If
            Me.InvokeAsync("UpdateAlertStatus", New Object() {alertId, statusId}, Me.UpdateAlertStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateAlertStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateAlertStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateAlertStatusCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ArchiveAlert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ArchiveAlert(ByVal alertId As Integer)
            Me.Invoke("ArchiveAlert", New Object() {alertId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ArchiveAlertAsync(ByVal alertId As Integer)
            Me.ArchiveAlertAsync(alertId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ArchiveAlertAsync(ByVal alertId As Integer, ByVal userState As Object)
            If (Me.ArchiveAlertOperationCompleted Is Nothing) Then
                Me.ArchiveAlertOperationCompleted = AddressOf Me.OnArchiveAlertOperationCompleted
            End If
            Me.InvokeAsync("ArchiveAlert", New Object() {alertId}, Me.ArchiveAlertOperationCompleted, userState)
        End Sub
        
        Private Sub OnArchiveAlertOperationCompleted(ByVal arg As Object)
            If (Not (Me.ArchiveAlertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ArchiveAlertCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserContacts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserContacts(ByVal UserId As String) As ContactView()
            Dim results() As Object = Me.Invoke("GetUserContacts", New Object() {UserId})
            Return CType(results(0),ContactView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserContactsAsync(ByVal UserId As String)
            Me.GetUserContactsAsync(UserId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserContactsAsync(ByVal UserId As String, ByVal userState As Object)
            If (Me.GetUserContactsOperationCompleted Is Nothing) Then
                Me.GetUserContactsOperationCompleted = AddressOf Me.OnGetUserContactsOperationCompleted
            End If
            Me.InvokeAsync("GetUserContacts", New Object() {UserId}, Me.GetUserContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserContactsCompleted(Me, New GetUserContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserVerifiedContacts", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserVerifiedContacts(ByVal UserId As String) As ContactView()
            Dim results() As Object = Me.Invoke("GetUserVerifiedContacts", New Object() {UserId})
            Return CType(results(0),ContactView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserVerifiedContactsAsync(ByVal UserId As String)
            Me.GetUserVerifiedContactsAsync(UserId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserVerifiedContactsAsync(ByVal UserId As String, ByVal userState As Object)
            If (Me.GetUserVerifiedContactsOperationCompleted Is Nothing) Then
                Me.GetUserVerifiedContactsOperationCompleted = AddressOf Me.OnGetUserVerifiedContactsOperationCompleted
            End If
            Me.InvokeAsync("GetUserVerifiedContacts", New Object() {UserId}, Me.GetUserVerifiedContactsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserVerifiedContactsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserVerifiedContactsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserVerifiedContactsCompleted(Me, New GetUserVerifiedContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContactDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetContactDetails(ByVal UserId As String, ByVal contactId As Integer) As String()
            Dim results() As Object = Me.Invoke("GetContactDetails", New Object() {UserId, contactId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetContactDetailsAsync(ByVal UserId As String, ByVal contactId As Integer)
            Me.GetContactDetailsAsync(UserId, contactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetContactDetailsAsync(ByVal UserId As String, ByVal contactId As Integer, ByVal userState As Object)
            If (Me.GetContactDetailsOperationCompleted Is Nothing) Then
                Me.GetContactDetailsOperationCompleted = AddressOf Me.OnGetContactDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetContactDetails", New Object() {UserId, contactId}, Me.GetContactDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetContactDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetContactDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetContactDetailsCompleted(Me, New GetContactDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddNewContact(ByVal UserId As String, ByVal TypeId As Integer, ByVal ProviderId As Integer, ByVal info As String, ByVal code As Integer)
            Me.Invoke("AddNewContact", New Object() {UserId, TypeId, ProviderId, info, code})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewContactAsync(ByVal UserId As String, ByVal TypeId As Integer, ByVal ProviderId As Integer, ByVal info As String, ByVal code As Integer)
            Me.AddNewContactAsync(UserId, TypeId, ProviderId, info, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewContactAsync(ByVal UserId As String, ByVal TypeId As Integer, ByVal ProviderId As Integer, ByVal info As String, ByVal code As Integer, ByVal userState As Object)
            If (Me.AddNewContactOperationCompleted Is Nothing) Then
                Me.AddNewContactOperationCompleted = AddressOf Me.OnAddNewContactOperationCompleted
            End If
            Me.InvokeAsync("AddNewContact", New Object() {UserId, TypeId, ProviderId, info, code}, Me.AddNewContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateContactEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateContactEmail(ByVal UserId As String, ByVal oldEmail As String, ByVal newEmail As String, ByVal code As Integer) As Boolean
            Dim results() As Object = Me.Invoke("UpdateContactEmail", New Object() {UserId, oldEmail, newEmail, code})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateContactEmailAsync(ByVal UserId As String, ByVal oldEmail As String, ByVal newEmail As String, ByVal code As Integer)
            Me.UpdateContactEmailAsync(UserId, oldEmail, newEmail, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateContactEmailAsync(ByVal UserId As String, ByVal oldEmail As String, ByVal newEmail As String, ByVal code As Integer, ByVal userState As Object)
            If (Me.UpdateContactEmailOperationCompleted Is Nothing) Then
                Me.UpdateContactEmailOperationCompleted = AddressOf Me.OnUpdateContactEmailOperationCompleted
            End If
            Me.InvokeAsync("UpdateContactEmail", New Object() {UserId, oldEmail, newEmail, code}, Me.UpdateContactEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateContactEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateContactEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateContactEmailCompleted(Me, New UpdateContactEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateContact(ByVal UserId As String, ByVal contactId As Integer, ByVal code As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidateContact", New Object() {UserId, contactId, code})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateContactAsync(ByVal UserId As String, ByVal contactId As Integer, ByVal code As String)
            Me.ValidateContactAsync(UserId, contactId, code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateContactAsync(ByVal UserId As String, ByVal contactId As Integer, ByVal code As String, ByVal userState As Object)
            If (Me.ValidateContactOperationCompleted Is Nothing) Then
                Me.ValidateContactOperationCompleted = AddressOf Me.OnValidateContactOperationCompleted
            End If
            Me.InvokeAsync("ValidateContact", New Object() {UserId, contactId, code}, Me.ValidateContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateContactCompleted(Me, New ValidateContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteContact", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteContact(ByVal UserId As String, ByVal contactId As Integer)
            Me.Invoke("DeleteContact", New Object() {UserId, contactId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAsync(ByVal UserId As String, ByVal contactId As Integer)
            Me.DeleteContactAsync(UserId, contactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteContactAsync(ByVal UserId As String, ByVal contactId As Integer, ByVal userState As Object)
            If (Me.DeleteContactOperationCompleted Is Nothing) Then
                Me.DeleteContactOperationCompleted = AddressOf Me.OnDeleteContactOperationCompleted
            End If
            Me.InvokeAsync("DeleteContact", New Object() {UserId, contactId}, Me.DeleteContactOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteContactOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteContactCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteContactCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserSubscriptions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserSubscriptions(ByVal UserId As String) As ContactAlertView()
            Dim results() As Object = Me.Invoke("GetUserSubscriptions", New Object() {UserId})
            Return CType(results(0),ContactAlertView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserSubscriptionsAsync(ByVal UserId As String)
            Me.GetUserSubscriptionsAsync(UserId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserSubscriptionsAsync(ByVal UserId As String, ByVal userState As Object)
            If (Me.GetUserSubscriptionsOperationCompleted Is Nothing) Then
                Me.GetUserSubscriptionsOperationCompleted = AddressOf Me.OnGetUserSubscriptionsOperationCompleted
            End If
            Me.InvokeAsync("GetUserSubscriptions", New Object() {UserId}, Me.GetUserSubscriptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserSubscriptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserSubscriptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserSubscriptionsCompleted(Me, New GetUserSubscriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubscriptionDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSubscriptionDetails(ByVal userId As String, ByVal subscriptionId As Integer) As String()
            Dim results() As Object = Me.Invoke("GetSubscriptionDetails", New Object() {userId, subscriptionId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSubscriptionDetailsAsync(ByVal userId As String, ByVal subscriptionId As Integer)
            Me.GetSubscriptionDetailsAsync(userId, subscriptionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSubscriptionDetailsAsync(ByVal userId As String, ByVal subscriptionId As Integer, ByVal userState As Object)
            If (Me.GetSubscriptionDetailsOperationCompleted Is Nothing) Then
                Me.GetSubscriptionDetailsOperationCompleted = AddressOf Me.OnGetSubscriptionDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetSubscriptionDetails", New Object() {userId, subscriptionId}, Me.GetSubscriptionDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSubscriptionDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSubscriptionDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSubscriptionDetailsCompleted(Me, New GetSubscriptionDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewSubscription", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub AddNewSubscription(ByVal contactId() As Integer, ByVal categoryId() As Integer, ByVal StartDate As Date, ByVal EndDate As String)
            Me.Invoke("AddNewSubscription", New Object() {contactId, categoryId, StartDate, EndDate})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewSubscriptionAsync(ByVal contactId() As Integer, ByVal categoryId() As Integer, ByVal StartDate As Date, ByVal EndDate As String)
            Me.AddNewSubscriptionAsync(contactId, categoryId, StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddNewSubscriptionAsync(ByVal contactId() As Integer, ByVal categoryId() As Integer, ByVal StartDate As Date, ByVal EndDate As String, ByVal userState As Object)
            If (Me.AddNewSubscriptionOperationCompleted Is Nothing) Then
                Me.AddNewSubscriptionOperationCompleted = AddressOf Me.OnAddNewSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("AddNewSubscription", New Object() {contactId, categoryId, StartDate, EndDate}, Me.AddNewSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddNewSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddNewSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddNewSubscriptionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSubscription", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateSubscription(ByVal subscriptionId As Integer, ByVal contactId As Integer, ByVal catId As Integer, ByVal StartDate As Date, ByVal EndDate As String)
            Me.Invoke("UpdateSubscription", New Object() {subscriptionId, contactId, catId, StartDate, EndDate})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSubscriptionAsync(ByVal subscriptionId As Integer, ByVal contactId As Integer, ByVal catId As Integer, ByVal StartDate As Date, ByVal EndDate As String)
            Me.UpdateSubscriptionAsync(subscriptionId, contactId, catId, StartDate, EndDate, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSubscriptionAsync(ByVal subscriptionId As Integer, ByVal contactId As Integer, ByVal catId As Integer, ByVal StartDate As Date, ByVal EndDate As String, ByVal userState As Object)
            If (Me.UpdateSubscriptionOperationCompleted Is Nothing) Then
                Me.UpdateSubscriptionOperationCompleted = AddressOf Me.OnUpdateSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("UpdateSubscription", New Object() {subscriptionId, contactId, catId, StartDate, EndDate}, Me.UpdateSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSubscriptionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSubscription", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSubscription(ByVal subscriptionId As String)
            Me.Invoke("DeleteSubscription", New Object() {subscriptionId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionAsync(ByVal subscriptionId As String)
            Me.DeleteSubscriptionAsync(subscriptionId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionAsync(ByVal subscriptionId As String, ByVal userState As Object)
            If (Me.DeleteSubscriptionOperationCompleted Is Nothing) Then
                Me.DeleteSubscriptionOperationCompleted = AddressOf Me.OnDeleteSubscriptionOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscription", New Object() {subscriptionId}, Me.DeleteSubscriptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscriptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscriptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscriptionCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSubscriptionsByContactId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSubscriptionsByContactId(ByVal contactId As Integer)
            Me.Invoke("DeleteSubscriptionsByContactId", New Object() {contactId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionsByContactIdAsync(ByVal contactId As Integer)
            Me.DeleteSubscriptionsByContactIdAsync(contactId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionsByContactIdAsync(ByVal contactId As Integer, ByVal userState As Object)
            If (Me.DeleteSubscriptionsByContactIdOperationCompleted Is Nothing) Then
                Me.DeleteSubscriptionsByContactIdOperationCompleted = AddressOf Me.OnDeleteSubscriptionsByContactIdOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscriptionsByContactId", New Object() {contactId}, Me.DeleteSubscriptionsByContactIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscriptionsByContactIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscriptionsByContactIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscriptionsByContactIdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSubscriptionsByCategoryId", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub DeleteSubscriptionsByCategoryId(ByVal categoryId As Integer)
            Me.Invoke("DeleteSubscriptionsByCategoryId", New Object() {categoryId})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionsByCategoryIdAsync(ByVal categoryId As Integer)
            Me.DeleteSubscriptionsByCategoryIdAsync(categoryId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteSubscriptionsByCategoryIdAsync(ByVal categoryId As Integer, ByVal userState As Object)
            If (Me.DeleteSubscriptionsByCategoryIdOperationCompleted Is Nothing) Then
                Me.DeleteSubscriptionsByCategoryIdOperationCompleted = AddressOf Me.OnDeleteSubscriptionsByCategoryIdOperationCompleted
            End If
            Me.InvokeAsync("DeleteSubscriptionsByCategoryId", New Object() {categoryId}, Me.DeleteSubscriptionsByCategoryIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteSubscriptionsByCategoryIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteSubscriptionsByCategoryIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteSubscriptionsByCategoryIdCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlertTextList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlertTextList(ByVal catId As Integer) As String()
            Dim results() As Object = Me.Invoke("GetAlertTextList", New Object() {catId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlertTextListAsync(ByVal catId As Integer)
            Me.GetAlertTextListAsync(catId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlertTextListAsync(ByVal catId As Integer, ByVal userState As Object)
            If (Me.GetAlertTextListOperationCompleted Is Nothing) Then
                Me.GetAlertTextListOperationCompleted = AddressOf Me.OnGetAlertTextListOperationCompleted
            End If
            Me.InvokeAsync("GetAlertTextList", New Object() {catId}, Me.GetAlertTextListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlertTextListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlertTextListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlertTextListCompleted(Me, New GetAlertTextListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAlertEmailList", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAlertEmailList(ByVal catId As Integer) As String()
            Dim results() As Object = Me.Invoke("GetAlertEmailList", New Object() {catId})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAlertEmailListAsync(ByVal catId As Integer)
            Me.GetAlertEmailListAsync(catId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAlertEmailListAsync(ByVal catId As Integer, ByVal userState As Object)
            If (Me.GetAlertEmailListOperationCompleted Is Nothing) Then
                Me.GetAlertEmailListOperationCompleted = AddressOf Me.OnGetAlertEmailListOperationCompleted
            End If
            Me.InvokeAsync("GetAlertEmailList", New Object() {catId}, Me.GetAlertEmailListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAlertEmailListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAlertEmailListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAlertEmailListCompleted(Me, New GetAlertEmailListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserRoleDescriptions", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserRoleDescriptions(ByVal username As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetUserRoleDescriptions", New Object() {username})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserRoleDescriptionsAsync(ByVal username As String)
            Me.GetUserRoleDescriptionsAsync(username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserRoleDescriptionsAsync(ByVal username As String, ByVal userState As Object)
            If (Me.GetUserRoleDescriptionsOperationCompleted Is Nothing) Then
                Me.GetUserRoleDescriptionsOperationCompleted = AddressOf Me.OnGetUserRoleDescriptionsOperationCompleted
            End If
            Me.InvokeAsync("GetUserRoleDescriptions", New Object() {username}, Me.GetUserRoleDescriptionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserRoleDescriptionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserRoleDescriptionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserRoleDescriptionsCompleted(Me, New GetUserRoleDescriptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserDetails", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserDetails(ByVal username As String, ByVal email As String, ByVal applicationname As String) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetUserDetails", New Object() {username, email, applicationname})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserDetailsAsync(ByVal username As String, ByVal email As String, ByVal applicationname As String)
            Me.GetUserDetailsAsync(username, email, applicationname, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserDetailsAsync(ByVal username As String, ByVal email As String, ByVal applicationname As String, ByVal userState As Object)
            If (Me.GetUserDetailsOperationCompleted Is Nothing) Then
                Me.GetUserDetailsOperationCompleted = AddressOf Me.OnGetUserDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetUserDetails", New Object() {username, email, applicationname}, Me.GetUserDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserDetailsCompleted(Me, New GetUserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AlertCategoryView
        
        Private category_IdField As Integer
        
        Private parent_IdField As System.Nullable(Of Integer)
        
        Private categoryNameField As String
        
        Private categoryDescriptionField As String
        
        Private categoryCodeField As String
        
        Private isPublicField As System.Nullable(Of Boolean)
        
        '''<remarks/>
        Public Property Category_Id() As Integer
            Get
                Return Me.category_IdField
            End Get
            Set
                Me.category_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Parent_Id() As System.Nullable(Of Integer)
            Get
                Return Me.parent_IdField
            End Get
            Set
                Me.parent_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryName() As String
            Get
                Return Me.categoryNameField
            End Get
            Set
                Me.categoryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryDescription() As String
            Get
                Return Me.categoryDescriptionField
            End Get
            Set
                Me.categoryDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryCode() As String
            Get
                Return Me.categoryCodeField
            End Get
            Set
                Me.categoryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property IsPublic() As System.Nullable(Of Boolean)
            Get
                Return Me.isPublicField
            End Get
            Set
                Me.isPublicField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ContactAlertView
        
        Private idField As Integer
        
        Private contact_IdField As Integer
        
        Private alert_Category_IdField As Integer
        
        Private start_DateField As Date
        
        Private finish_DateField As System.Nullable(Of Date)
        
        Private contact_User_IdField As System.Guid
        
        Private contact_Type_IdField As Integer
        
        Private provider_IdField As System.Nullable(Of Integer)
        
        Private contact_InfoField As String
        
        Private contact_EnabledField As Boolean
        
        Private contact_ValidationField As System.Nullable(Of Integer)
        
        Private providerNameField As String
        
        Private domainField As String
        
        Private contact_Type_NameField As String
        
        Private parent_IdField As System.Nullable(Of Integer)
        
        Private categoryNameField As String
        
        '''<remarks/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Id() As Integer
            Get
                Return Me.contact_IdField
            End Get
            Set
                Me.contact_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Alert_Category_Id() As Integer
            Get
                Return Me.alert_Category_IdField
            End Get
            Set
                Me.alert_Category_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Start_Date() As Date
            Get
                Return Me.start_DateField
            End Get
            Set
                Me.start_DateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Finish_Date() As System.Nullable(Of Date)
            Get
                Return Me.finish_DateField
            End Get
            Set
                Me.finish_DateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_User_Id() As System.Guid
            Get
                Return Me.contact_User_IdField
            End Get
            Set
                Me.contact_User_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Type_Id() As Integer
            Get
                Return Me.contact_Type_IdField
            End Get
            Set
                Me.contact_Type_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Provider_Id() As System.Nullable(Of Integer)
            Get
                Return Me.provider_IdField
            End Get
            Set
                Me.provider_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Info() As String
            Get
                Return Me.contact_InfoField
            End Get
            Set
                Me.contact_InfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Enabled() As Boolean
            Get
                Return Me.contact_EnabledField
            End Get
            Set
                Me.contact_EnabledField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Contact_Validation() As System.Nullable(Of Integer)
            Get
                Return Me.contact_ValidationField
            End Get
            Set
                Me.contact_ValidationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProviderName() As String
            Get
                Return Me.providerNameField
            End Get
            Set
                Me.providerNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Domain() As String
            Get
                Return Me.domainField
            End Get
            Set
                Me.domainField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Type_Name() As String
            Get
                Return Me.contact_Type_NameField
            End Get
            Set
                Me.contact_Type_NameField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Parent_Id() As System.Nullable(Of Integer)
            Get
                Return Me.parent_IdField
            End Get
            Set
                Me.parent_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryName() As String
            Get
                Return Me.categoryNameField
            End Get
            Set
                Me.categoryNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ContactView
        
        Private contact_IdField As Integer
        
        Private contact_User_IdField As System.Guid
        
        Private contact_Type_IdField As Integer
        
        Private provider_IdField As System.Nullable(Of Integer)
        
        Private contact_InfoField As String
        
        Private contact_EnabledField As Boolean
        
        Private contact_ValidationField As System.Nullable(Of Integer)
        
        Private providerNameField As String
        
        Private domainField As String
        
        '''<remarks/>
        Public Property Contact_Id() As Integer
            Get
                Return Me.contact_IdField
            End Get
            Set
                Me.contact_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_User_Id() As System.Guid
            Get
                Return Me.contact_User_IdField
            End Get
            Set
                Me.contact_User_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Type_Id() As Integer
            Get
                Return Me.contact_Type_IdField
            End Get
            Set
                Me.contact_Type_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Provider_Id() As System.Nullable(Of Integer)
            Get
                Return Me.provider_IdField
            End Get
            Set
                Me.provider_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Info() As String
            Get
                Return Me.contact_InfoField
            End Get
            Set
                Me.contact_InfoField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Contact_Enabled() As Boolean
            Get
                Return Me.contact_EnabledField
            End Get
            Set
                Me.contact_EnabledField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Contact_Validation() As System.Nullable(Of Integer)
            Get
                Return Me.contact_ValidationField
            End Get
            Set
                Me.contact_ValidationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ProviderName() As String
            Get
                Return Me.providerNameField
            End Get
            Set
                Me.providerNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Domain() As String
            Get
                Return Me.domainField
            End Get
            Set
                Me.domainField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class AlertView
        
        Private alert_IdField As Integer
        
        Private category_IdField As Integer
        
        Private status_IdField As Integer
        
        Private dateAddedField As Date
        
        Private messageTextField As String
        
        Private messageEmailField As String
        
        Private isArchivedField As Boolean
        
        Private endDateField As System.Nullable(Of Date)
        
        Private displayAlertField As System.Nullable(Of Boolean)
        
        Private parent_IdField As System.Nullable(Of Integer)
        
        Private categoryNameField As String
        
        Private categoryDescriptionField As String
        
        Private categoryCodeField As String
        
        Private isPublicField As System.Nullable(Of Boolean)
        
        Private statusNameField As String
        
        '''<remarks/>
        Public Property Alert_Id() As Integer
            Get
                Return Me.alert_IdField
            End Get
            Set
                Me.alert_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Category_Id() As Integer
            Get
                Return Me.category_IdField
            End Get
            Set
                Me.category_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Status_Id() As Integer
            Get
                Return Me.status_IdField
            End Get
            Set
                Me.status_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property DateAdded() As Date
            Get
                Return Me.dateAddedField
            End Get
            Set
                Me.dateAddedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MessageText() As String
            Get
                Return Me.messageTextField
            End Get
            Set
                Me.messageTextField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MessageEmail() As String
            Get
                Return Me.messageEmailField
            End Get
            Set
                Me.messageEmailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property IsArchived() As Boolean
            Get
                Return Me.isArchivedField
            End Get
            Set
                Me.isArchivedField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property EndDate() As System.Nullable(Of Date)
            Get
                Return Me.endDateField
            End Get
            Set
                Me.endDateField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property DisplayAlert() As System.Nullable(Of Boolean)
            Get
                Return Me.displayAlertField
            End Get
            Set
                Me.displayAlertField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property Parent_Id() As System.Nullable(Of Integer)
            Get
                Return Me.parent_IdField
            End Get
            Set
                Me.parent_IdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryName() As String
            Get
                Return Me.categoryNameField
            End Get
            Set
                Me.categoryNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryDescription() As String
            Get
                Return Me.categoryDescriptionField
            End Get
            Set
                Me.categoryDescriptionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CategoryCode() As String
            Get
                Return Me.categoryCodeField
            End Get
            Set
                Me.categoryCodeField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)>  _
        Public Property IsPublic() As System.Nullable(Of Boolean)
            Get
                Return Me.isPublicField
            End Get
            Set
                Me.isPublicField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property StatusName() As String
            Get
                Return Me.statusNameField
            End Get
            Set
                Me.statusNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAllParentCategoriesCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllParentCategoriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllParentCategoriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AlertCategoryView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AlertCategoryView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetPublicParentCategoriesCompletedEventHandler(ByVal sender As Object, ByVal e As GetPublicParentCategoriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPublicParentCategoriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AlertCategoryView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AlertCategoryView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSubCategoriesCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubCategoriesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubCategoriesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AlertCategoryView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AlertCategoryView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCategoryDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetCategoryDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCategoryDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CategoryExistsCompletedEventHandler(ByVal sender As Object, ByVal e As CategoryExistsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CategoryExistsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub CategoryIsPublicCompletedEventHandler(ByVal sender As Object, ByVal e As CategoryIsPublicCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CategoryIsPublicCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlertsByCategoryCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlertsByCategoryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlertsByCategoryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As AlertView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),AlertView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlertDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlertDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlertDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewAlertCompletedEventHandler(ByVal sender As Object, ByVal e As AddNewAlertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddNewAlertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAlertCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteAlertCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateAlertStatusCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ArchiveAlertCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserContactsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ContactView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ContactView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserVerifiedContactsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserVerifiedContactsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserVerifiedContactsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ContactView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ContactView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetContactDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetContactDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetContactDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateContactEmailCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateContactEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateContactEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub ValidateContactCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateContactCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateContactCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteContactCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserSubscriptionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserSubscriptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserSubscriptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ContactAlertView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ContactAlertView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetSubscriptionDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSubscriptionDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSubscriptionDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub AddNewSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub UpdateSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteSubscriptionCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteSubscriptionsByContactIdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub DeleteSubscriptionsByCategoryIdCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlertTextListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlertTextListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlertTextListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetAlertEmailListCompletedEventHandler(ByVal sender As Object, ByVal e As GetAlertEmailListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAlertEmailListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserRoleDescriptionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserRoleDescriptionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserRoleDescriptionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUserDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
End Namespace
