'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5456.
'
Namespace StatesAndProvincesService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="StatesAndProvincesServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class StatesAndProvincesService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetStatesAndProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUSStatesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCanadianProvincesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.NFTA_Metro.My.MySettings.Default.NFTA_Metro_StatesAndProvincesService_StatesAndProvincesService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetStatesAndProvincesCompleted As GetStatesAndProvincesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUSStatesCompleted As GetUSStatesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCanadianProvincesCompleted As GetCanadianProvincesCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStatesAndProvinces", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStatesAndProvinces() As StatesAndProvincesView()
            Dim results() As Object = Me.Invoke("GetStatesAndProvinces", New Object(-1) {})
            Return CType(results(0),StatesAndProvincesView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStatesAndProvincesAsync()
            Me.GetStatesAndProvincesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStatesAndProvincesAsync(ByVal userState As Object)
            If (Me.GetStatesAndProvincesOperationCompleted Is Nothing) Then
                Me.GetStatesAndProvincesOperationCompleted = AddressOf Me.OnGetStatesAndProvincesOperationCompleted
            End If
            Me.InvokeAsync("GetStatesAndProvinces", New Object(-1) {}, Me.GetStatesAndProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStatesAndProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStatesAndProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStatesAndProvincesCompleted(Me, New GetStatesAndProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUSStates", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUSStates() As StatesAndProvincesView()
            Dim results() As Object = Me.Invoke("GetUSStates", New Object(-1) {})
            Return CType(results(0),StatesAndProvincesView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUSStatesAsync()
            Me.GetUSStatesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUSStatesAsync(ByVal userState As Object)
            If (Me.GetUSStatesOperationCompleted Is Nothing) Then
                Me.GetUSStatesOperationCompleted = AddressOf Me.OnGetUSStatesOperationCompleted
            End If
            Me.InvokeAsync("GetUSStates", New Object(-1) {}, Me.GetUSStatesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUSStatesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUSStatesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUSStatesCompleted(Me, New GetUSStatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCanadianProvinces", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCanadianProvinces() As StatesAndProvincesView()
            Dim results() As Object = Me.Invoke("GetCanadianProvinces", New Object(-1) {})
            Return CType(results(0),StatesAndProvincesView())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCanadianProvincesAsync()
            Me.GetCanadianProvincesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCanadianProvincesAsync(ByVal userState As Object)
            If (Me.GetCanadianProvincesOperationCompleted Is Nothing) Then
                Me.GetCanadianProvincesOperationCompleted = AddressOf Me.OnGetCanadianProvincesOperationCompleted
            End If
            Me.InvokeAsync("GetCanadianProvinces", New Object(-1) {}, Me.GetCanadianProvincesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCanadianProvincesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCanadianProvincesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCanadianProvincesCompleted(Me, New GetCanadianProvincesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class StatesAndProvincesView
        
        Private stpIdField As Integer
        
        Private stpNameField As String
        
        Private stpAbbreviationField As String
        
        Private stpCountryField As String
        
        '''<remarks/>
        Public Property stpId() As Integer
            Get
                Return Me.stpIdField
            End Get
            Set
                Me.stpIdField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property stpName() As String
            Get
                Return Me.stpNameField
            End Get
            Set
                Me.stpNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property stpAbbreviation() As String
            Get
                Return Me.stpAbbreviationField
            End Get
            Set
                Me.stpAbbreviationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property stpCountry() As String
            Get
                Return Me.stpCountryField
            End Get
            Set
                Me.stpCountryField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetStatesAndProvincesCompletedEventHandler(ByVal sender As Object, ByVal e As GetStatesAndProvincesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStatesAndProvincesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As StatesAndProvincesView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),StatesAndProvincesView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetUSStatesCompletedEventHandler(ByVal sender As Object, ByVal e As GetUSStatesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUSStatesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As StatesAndProvincesView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),StatesAndProvincesView())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub GetCanadianProvincesCompletedEventHandler(ByVal sender As Object, ByVal e As GetCanadianProvincesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCanadianProvincesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As StatesAndProvincesView()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),StatesAndProvincesView())
            End Get
        End Property
    End Class
End Namespace
