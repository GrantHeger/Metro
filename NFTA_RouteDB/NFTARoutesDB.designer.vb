'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="nftaalerts")>  _
Partial Public Class NFTARoutesDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertgtfs_color(instance As gtfs_color)
    End Sub
  Partial Private Sub Updategtfs_color(instance As gtfs_color)
    End Sub
  Partial Private Sub Deletegtfs_color(instance As gtfs_color)
    End Sub
  Partial Private Sub Insertgtfs_route(instance As gtfs_route)
    End Sub
  Partial Private Sub Updategtfs_route(instance As gtfs_route)
    End Sub
  Partial Private Sub Deletegtfs_route(instance As gtfs_route)
    End Sub
  Partial Private Sub InsertRoute(instance As Route)
    End Sub
  Partial Private Sub UpdateRoute(instance As Route)
    End Sub
  Partial Private Sub DeleteRoute(instance As Route)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.NFTA_RouteDB.My.MySettings.Default.nftaalertsConnectionString2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Shapes() As System.Data.Linq.Table(Of Shape)
		Get
			Return Me.GetTable(Of Shape)
		End Get
	End Property
	
	Public ReadOnly Property gtfs_colors() As System.Data.Linq.Table(Of gtfs_color)
		Get
			Return Me.GetTable(Of gtfs_color)
		End Get
	End Property
	
	Public ReadOnly Property gtfs_routes() As System.Data.Linq.Table(Of gtfs_route)
		Get
			Return Me.GetTable(Of gtfs_route)
		End Get
	End Property
	
	Public ReadOnly Property gtfs_shapes() As System.Data.Linq.Table(Of gtfs_shape)
		Get
			Return Me.GetTable(Of gtfs_shape)
		End Get
	End Property
	
	Public ReadOnly Property gtfs_trips() As System.Data.Linq.Table(Of gtfs_trip)
		Get
			Return Me.GetTable(Of gtfs_trip)
		End Get
	End Property
	
	Public ReadOnly Property Routes() As System.Data.Linq.Table(Of Route)
		Get
			Return Me.GetTable(Of Route)
		End Get
	End Property
	
	Public ReadOnly Property gtfs_services() As System.Data.Linq.Table(Of gtfs_service)
		Get
			Return Me.GetTable(Of gtfs_service)
		End Get
	End Property
	
	Public ReadOnly Property RailStations() As System.Data.Linq.Table(Of RailStation)
		Get
			Return Me.GetTable(Of RailStation)
		End Get
	End Property
End Class

<Table(Name:="dbo.Shapes")>  _
Partial Public Class Shape
	
	Private _route_id As String
	
	Private _shape_pt_lon As String
	
	Private _shape_pt_lat As String
	
	Private _shape_pt_sequence As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_route_id", DbType:="NVarChar(10)")>  _
	Public Property route_id() As String
		Get
			Return Me._route_id
		End Get
		Set
			If (String.Equals(Me._route_id, value) = false) Then
				Me._route_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_lon", DbType:="VarChar(50)")>  _
	Public Property shape_pt_lon() As String
		Get
			Return Me._shape_pt_lon
		End Get
		Set
			If (String.Equals(Me._shape_pt_lon, value) = false) Then
				Me._shape_pt_lon = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_lat", DbType:="VarChar(50)")>  _
	Public Property shape_pt_lat() As String
		Get
			Return Me._shape_pt_lat
		End Get
		Set
			If (String.Equals(Me._shape_pt_lat, value) = false) Then
				Me._shape_pt_lat = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_sequence", DbType:="int")>  _
	Public Property shape_pt_sequence() As System.Nullable(Of Integer)
		Get
			Return Me._shape_pt_sequence
		End Get
		Set
			If (Me._shape_pt_sequence.Equals(value) = false) Then
				Me._shape_pt_sequence = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.gtfs_colors")>  _
Partial Public Class gtfs_color
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _color_id As Integer
	
	Private _text_color As String
	
	Private _color_name As String
	
	Private _hex_color As String
	
	Private _route_number As System.Nullable(Of Integer)
	
	Private _gtfs_routes As EntitySet(Of gtfs_route)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Oncolor_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncolor_idChanged()
    End Sub
    Partial Private Sub Ontext_colorChanging(value As String)
    End Sub
    Partial Private Sub Ontext_colorChanged()
    End Sub
    Partial Private Sub Oncolor_nameChanging(value As String)
    End Sub
    Partial Private Sub Oncolor_nameChanged()
    End Sub
    Partial Private Sub Onhex_colorChanging(value As String)
    End Sub
    Partial Private Sub Onhex_colorChanged()
    End Sub
    Partial Private Sub Onroute_numberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onroute_numberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gtfs_routes = New EntitySet(Of gtfs_route)(AddressOf Me.attach_gtfs_routes, AddressOf Me.detach_gtfs_routes)
		OnCreated
	End Sub
	
	<Column(Storage:="_color_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property color_id() As Integer
		Get
			Return Me._color_id
		End Get
		Set
			If ((Me._color_id = value)  _
						= false) Then
				Me.Oncolor_idChanging(value)
				Me.SendPropertyChanging
				Me._color_id = value
				Me.SendPropertyChanged("color_id")
				Me.Oncolor_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_text_color", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property text_color() As String
		Get
			Return Me._text_color
		End Get
		Set
			If (String.Equals(Me._text_color, value) = false) Then
				Me.Ontext_colorChanging(value)
				Me.SendPropertyChanging
				Me._text_color = value
				Me.SendPropertyChanged("text_color")
				Me.Ontext_colorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_color_name", DbType:="VarChar(50)")>  _
	Public Property color_name() As String
		Get
			Return Me._color_name
		End Get
		Set
			If (String.Equals(Me._color_name, value) = false) Then
				Me.Oncolor_nameChanging(value)
				Me.SendPropertyChanging
				Me._color_name = value
				Me.SendPropertyChanged("color_name")
				Me.Oncolor_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_hex_color", DbType:="VarChar(50)")>  _
	Public Property hex_color() As String
		Get
			Return Me._hex_color
		End Get
		Set
			If (String.Equals(Me._hex_color, value) = false) Then
				Me.Onhex_colorChanging(value)
				Me.SendPropertyChanging
				Me._hex_color = value
				Me.SendPropertyChanged("hex_color")
				Me.Onhex_colorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_number", DbType:="Int")>  _
	Public Property route_number() As System.Nullable(Of Integer)
		Get
			Return Me._route_number
		End Get
		Set
			If (Me._route_number.Equals(value) = false) Then
				Me.Onroute_numberChanging(value)
				Me.SendPropertyChanging
				Me._route_number = value
				Me.SendPropertyChanged("route_number")
				Me.Onroute_numberChanged
			End If
		End Set
	End Property
	
	<Association(Name:="gtfs_color_gtfs_route", Storage:="_gtfs_routes", ThisKey:="color_id", OtherKey:="route_color")>  _
	Public Property gtfs_routes() As EntitySet(Of gtfs_route)
		Get
			Return Me._gtfs_routes
		End Get
		Set
			Me._gtfs_routes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_gtfs_routes(ByVal entity As gtfs_route)
		Me.SendPropertyChanging
		entity.gtfs_color = Me
	End Sub
	
	Private Sub detach_gtfs_routes(ByVal entity As gtfs_route)
		Me.SendPropertyChanging
		entity.gtfs_color = Nothing
	End Sub
End Class

<Table(Name:="dbo.gtfs_routes")>  _
Partial Public Class gtfs_route
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _route_id As Integer
	
	Private _agency_id As System.Nullable(Of Integer)
	
	Private _route_short_name As System.Nullable(Of Integer)
	
	Private _route_long_name As String
	
	Private _route_type As String
	
	Private _route_url As String
	
	Private _route_color As System.Nullable(Of Integer)
	
	Private _gtfs_color As EntityRef(Of gtfs_color)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onroute_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onroute_idChanged()
    End Sub
    Partial Private Sub Onagency_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onagency_idChanged()
    End Sub
    Partial Private Sub Onroute_short_nameChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onroute_short_nameChanged()
    End Sub
    Partial Private Sub Onroute_long_nameChanging(value As String)
    End Sub
    Partial Private Sub Onroute_long_nameChanged()
    End Sub
    Partial Private Sub Onroute_typeChanging(value As String)
    End Sub
    Partial Private Sub Onroute_typeChanged()
    End Sub
    Partial Private Sub Onroute_urlChanging(value As String)
    End Sub
    Partial Private Sub Onroute_urlChanged()
    End Sub
    Partial Private Sub Onroute_colorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onroute_colorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._gtfs_color = CType(Nothing, EntityRef(Of gtfs_color))
		OnCreated
	End Sub
	
	<Column(Storage:="_route_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property route_id() As Integer
		Get
			Return Me._route_id
		End Get
		Set
			If ((Me._route_id = value)  _
						= false) Then
				Me.Onroute_idChanging(value)
				Me.SendPropertyChanging
				Me._route_id = value
				Me.SendPropertyChanged("route_id")
				Me.Onroute_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_agency_id", DbType:="Int")>  _
	Public Property agency_id() As System.Nullable(Of Integer)
		Get
			Return Me._agency_id
		End Get
		Set
			If (Me._agency_id.Equals(value) = false) Then
				Me.Onagency_idChanging(value)
				Me.SendPropertyChanging
				Me._agency_id = value
				Me.SendPropertyChanged("agency_id")
				Me.Onagency_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_short_name", DbType:="Int")>  _
	Public Property route_short_name() As System.Nullable(Of Integer)
		Get
			Return Me._route_short_name
		End Get
		Set
			If (Me._route_short_name.Equals(value) = false) Then
				Me.Onroute_short_nameChanging(value)
				Me.SendPropertyChanging
				Me._route_short_name = value
				Me.SendPropertyChanged("route_short_name")
				Me.Onroute_short_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_long_name", DbType:="VarChar(50)")>  _
	Public Property route_long_name() As String
		Get
			Return Me._route_long_name
		End Get
		Set
			If (String.Equals(Me._route_long_name, value) = false) Then
				Me.Onroute_long_nameChanging(value)
				Me.SendPropertyChanging
				Me._route_long_name = value
				Me.SendPropertyChanged("route_long_name")
				Me.Onroute_long_nameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_type", DbType:="VarChar(50)")>  _
	Public Property route_type() As String
		Get
			Return Me._route_type
		End Get
		Set
			If (String.Equals(Me._route_type, value) = false) Then
				Me.Onroute_typeChanging(value)
				Me.SendPropertyChanging
				Me._route_type = value
				Me.SendPropertyChanged("route_type")
				Me.Onroute_typeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_url", DbType:="VarChar(50)")>  _
	Public Property route_url() As String
		Get
			Return Me._route_url
		End Get
		Set
			If (String.Equals(Me._route_url, value) = false) Then
				Me.Onroute_urlChanging(value)
				Me.SendPropertyChanging
				Me._route_url = value
				Me.SendPropertyChanged("route_url")
				Me.Onroute_urlChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_route_color", DbType:="Int")>  _
	Public Property route_color() As System.Nullable(Of Integer)
		Get
			Return Me._route_color
		End Get
		Set
			If (Me._route_color.Equals(value) = false) Then
				If Me._gtfs_color.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onroute_colorChanging(value)
				Me.SendPropertyChanging
				Me._route_color = value
				Me.SendPropertyChanged("route_color")
				Me.Onroute_colorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="gtfs_color_gtfs_route", Storage:="_gtfs_color", ThisKey:="route_color", OtherKey:="color_id", IsForeignKey:=true)>  _
	Public Property gtfs_color() As gtfs_color
		Get
			Return Me._gtfs_color.Entity
		End Get
		Set
			Dim previousValue As gtfs_color = Me._gtfs_color.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._gtfs_color.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._gtfs_color.Entity = Nothing
					previousValue.gtfs_routes.Remove(Me)
				End If
				Me._gtfs_color.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.gtfs_routes.Add(Me)
					Me._route_color = value.color_id
				Else
					Me._route_color = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("gtfs_color")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gtfs_shapes")>  _
Partial Public Class gtfs_shape
	
	Private _shape_id As System.Nullable(Of Integer)
	
	Private _shape_pt_lat As String
	
	Private _shape_pt_lon As String
	
	Private _shape_pt_sequence As System.Nullable(Of Integer)
	
	Private _shape_dist_traveled As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_shape_id", DbType:="Int")>  _
	Public Property shape_id() As System.Nullable(Of Integer)
		Get
			Return Me._shape_id
		End Get
		Set
			If (Me._shape_id.Equals(value) = false) Then
				Me._shape_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_lat", DbType:="VarChar(50)")>  _
	Public Property shape_pt_lat() As String
		Get
			Return Me._shape_pt_lat
		End Get
		Set
			If (String.Equals(Me._shape_pt_lat, value) = false) Then
				Me._shape_pt_lat = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_lon", DbType:="VarChar(50)")>  _
	Public Property shape_pt_lon() As String
		Get
			Return Me._shape_pt_lon
		End Get
		Set
			If (String.Equals(Me._shape_pt_lon, value) = false) Then
				Me._shape_pt_lon = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_pt_sequence", DbType:="Int")>  _
	Public Property shape_pt_sequence() As System.Nullable(Of Integer)
		Get
			Return Me._shape_pt_sequence
		End Get
		Set
			If (Me._shape_pt_sequence.Equals(value) = false) Then
				Me._shape_pt_sequence = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_dist_traveled", DbType:="VarChar(50)")>  _
	Public Property shape_dist_traveled() As String
		Get
			Return Me._shape_dist_traveled
		End Get
		Set
			If (String.Equals(Me._shape_dist_traveled, value) = false) Then
				Me._shape_dist_traveled = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.gtfs_trips")>  _
Partial Public Class gtfs_trip
	
	Private _route_id As System.Nullable(Of Integer)
	
	Private _service_id As System.Nullable(Of Integer)
	
	Private _trip_id As System.Nullable(Of Integer)
	
	Private _trip_headsign As String
	
	Private _direction_id As String
	
	Private _block_id As String
	
	Private _shape_id As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_route_id", DbType:="Int")>  _
	Public Property route_id() As System.Nullable(Of Integer)
		Get
			Return Me._route_id
		End Get
		Set
			If (Me._route_id.Equals(value) = false) Then
				Me._route_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_service_id", DbType:="Int")>  _
	Public Property service_id() As System.Nullable(Of Integer)
		Get
			Return Me._service_id
		End Get
		Set
			If (Me._service_id.Equals(value) = false) Then
				Me._service_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_trip_id", DbType:="Int")>  _
	Public Property trip_id() As System.Nullable(Of Integer)
		Get
			Return Me._trip_id
		End Get
		Set
			If (Me._trip_id.Equals(value) = false) Then
				Me._trip_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_trip_headsign", DbType:="VarChar(100)")>  _
	Public Property trip_headsign() As String
		Get
			Return Me._trip_headsign
		End Get
		Set
			If (String.Equals(Me._trip_headsign, value) = false) Then
				Me._trip_headsign = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_direction_id", DbType:="VarChar(50)")>  _
	Public Property direction_id() As String
		Get
			Return Me._direction_id
		End Get
		Set
			If (String.Equals(Me._direction_id, value) = false) Then
				Me._direction_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_block_id", DbType:="VarChar(50)")>  _
	Public Property block_id() As String
		Get
			Return Me._block_id
		End Get
		Set
			If (String.Equals(Me._block_id, value) = false) Then
				Me._block_id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_shape_id", DbType:="Int")>  _
	Public Property shape_id() As System.Nullable(Of Integer)
		Get
			Return Me._shape_id
		End Get
		Set
			If (Me._shape_id.Equals(value) = false) Then
				Me._shape_id = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Route")>  _
Partial Public Class Route
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RouteId As Integer
	
	Private _Category_Id As Integer
	
	Private _RouteName As String
	
	Private _RouteNumber As String
	
	Private _Status As Boolean
	
	Private _Copy As String
	
	Private _Spanish As System.Nullable(Of Boolean)
	
	Private _English As System.Nullable(Of Boolean)
	
	Private _Pages As System.Nullable(Of Integer)
	
	Private _Map As System.Nullable(Of Boolean)
	
	Private _Note As String
	
	Private _Revised As String
	
	Private _TimeTable As System.Nullable(Of Boolean)
	
	Private _Preview As String
	
	Private _TextColor As String
	
	Private _RouteColor As String
	
	Private _Shape_In As System.Nullable(Of Integer)
	
	Private _Shape_Out As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRouteIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRouteIdChanged()
    End Sub
    Partial Private Sub OnCategory_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnCategory_IdChanged()
    End Sub
    Partial Private Sub OnRouteNameChanging(value As String)
    End Sub
    Partial Private Sub OnRouteNameChanged()
    End Sub
    Partial Private Sub OnRouteNumberChanging(value As String)
    End Sub
    Partial Private Sub OnRouteNumberChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnCopyChanging(value As String)
    End Sub
    Partial Private Sub OnCopyChanged()
    End Sub
    Partial Private Sub OnSpanishChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSpanishChanged()
    End Sub
    Partial Private Sub OnEnglishChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnglishChanged()
    End Sub
    Partial Private Sub OnPagesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPagesChanged()
    End Sub
    Partial Private Sub OnMapChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnMapChanged()
    End Sub
    Partial Private Sub OnNoteChanging(value As String)
    End Sub
    Partial Private Sub OnNoteChanged()
    End Sub
    Partial Private Sub OnRevisedChanging(value As String)
    End Sub
    Partial Private Sub OnRevisedChanged()
    End Sub
    Partial Private Sub OnTimeTableChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTimeTableChanged()
    End Sub
    Partial Private Sub OnPreviewChanging(value As String)
    End Sub
    Partial Private Sub OnPreviewChanged()
    End Sub
    Partial Private Sub OnTextColorChanging(value As String)
    End Sub
    Partial Private Sub OnTextColorChanged()
    End Sub
    Partial Private Sub OnRouteColorChanging(value As String)
    End Sub
    Partial Private Sub OnRouteColorChanged()
    End Sub
    Partial Private Sub OnShape_InChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShape_InChanged()
    End Sub
    Partial Private Sub OnShape_OutChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnShape_OutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_RouteId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RouteId() As Integer
		Get
			Return Me._RouteId
		End Get
		Set
			If ((Me._RouteId = value)  _
						= false) Then
				Me.OnRouteIdChanging(value)
				Me.SendPropertyChanging
				Me._RouteId = value
				Me.SendPropertyChanged("RouteId")
				Me.OnRouteIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Category_Id", DbType:="Int NOT NULL")>  _
	Public Property Category_Id() As Integer
		Get
			Return Me._Category_Id
		End Get
		Set
			If ((Me._Category_Id = value)  _
						= false) Then
				Me.OnCategory_IdChanging(value)
				Me.SendPropertyChanging
				Me._Category_Id = value
				Me.SendPropertyChanged("Category_Id")
				Me.OnCategory_IdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RouteName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RouteName() As String
		Get
			Return Me._RouteName
		End Get
		Set
			If (String.Equals(Me._RouteName, value) = false) Then
				Me.OnRouteNameChanging(value)
				Me.SendPropertyChanging
				Me._RouteName = value
				Me.SendPropertyChanged("RouteName")
				Me.OnRouteNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RouteNumber", DbType:="NVarChar(10)")>  _
	Public Property RouteNumber() As String
		Get
			Return Me._RouteNumber
		End Get
		Set
			If (String.Equals(Me._RouteNumber, value) = false) Then
				Me.OnRouteNumberChanging(value)
				Me.SendPropertyChanging
				Me._RouteNumber = value
				Me.SendPropertyChanged("RouteNumber")
				Me.OnRouteNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Status", DbType:="Bit NOT NULL")>  _
	Public Property Status() As Boolean
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Copy", DbType:="NVarChar(MAX)")>  _
	Public Property Copy() As String
		Get
			Return Me._Copy
		End Get
		Set
			If (String.Equals(Me._Copy, value) = false) Then
				Me.OnCopyChanging(value)
				Me.SendPropertyChanging
				Me._Copy = value
				Me.SendPropertyChanged("Copy")
				Me.OnCopyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Spanish", DbType:="Bit")>  _
	Public Property Spanish() As System.Nullable(Of Boolean)
		Get
			Return Me._Spanish
		End Get
		Set
			If (Me._Spanish.Equals(value) = false) Then
				Me.OnSpanishChanging(value)
				Me.SendPropertyChanging
				Me._Spanish = value
				Me.SendPropertyChanged("Spanish")
				Me.OnSpanishChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_English", DbType:="Bit")>  _
	Public Property English() As System.Nullable(Of Boolean)
		Get
			Return Me._English
		End Get
		Set
			If (Me._English.Equals(value) = false) Then
				Me.OnEnglishChanging(value)
				Me.SendPropertyChanging
				Me._English = value
				Me.SendPropertyChanged("English")
				Me.OnEnglishChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Pages", DbType:="Int")>  _
	Public Property Pages() As System.Nullable(Of Integer)
		Get
			Return Me._Pages
		End Get
		Set
			If (Me._Pages.Equals(value) = false) Then
				Me.OnPagesChanging(value)
				Me.SendPropertyChanging
				Me._Pages = value
				Me.SendPropertyChanged("Pages")
				Me.OnPagesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Map", DbType:="Bit")>  _
	Public Property Map() As System.Nullable(Of Boolean)
		Get
			Return Me._Map
		End Get
		Set
			If (Me._Map.Equals(value) = false) Then
				Me.OnMapChanging(value)
				Me.SendPropertyChanging
				Me._Map = value
				Me.SendPropertyChanged("Map")
				Me.OnMapChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Note", DbType:="NVarChar(MAX)")>  _
	Public Property Note() As String
		Get
			Return Me._Note
		End Get
		Set
			If (String.Equals(Me._Note, value) = false) Then
				Me.OnNoteChanging(value)
				Me.SendPropertyChanging
				Me._Note = value
				Me.SendPropertyChanged("Note")
				Me.OnNoteChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Revised", DbType:="NVarChar(MAX)")>  _
	Public Property Revised() As String
		Get
			Return Me._Revised
		End Get
		Set
			If (String.Equals(Me._Revised, value) = false) Then
				Me.OnRevisedChanging(value)
				Me.SendPropertyChanging
				Me._Revised = value
				Me.SendPropertyChanged("Revised")
				Me.OnRevisedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TimeTable", DbType:="Bit")>  _
	Public Property TimeTable() As System.Nullable(Of Boolean)
		Get
			Return Me._TimeTable
		End Get
		Set
			If (Me._TimeTable.Equals(value) = false) Then
				Me.OnTimeTableChanging(value)
				Me.SendPropertyChanging
				Me._TimeTable = value
				Me.SendPropertyChanged("TimeTable")
				Me.OnTimeTableChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Preview", DbType:="NChar(50)")>  _
	Public Property Preview() As String
		Get
			Return Me._Preview
		End Get
		Set
			If (String.Equals(Me._Preview, value) = false) Then
				Me.OnPreviewChanging(value)
				Me.SendPropertyChanging
				Me._Preview = value
				Me.SendPropertyChanged("Preview")
				Me.OnPreviewChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TextColor", DbType:="NVarChar(10)")>  _
	Public Property TextColor() As String
		Get
			Return Me._TextColor
		End Get
		Set
			If (String.Equals(Me._TextColor, value) = false) Then
				Me.OnTextColorChanging(value)
				Me.SendPropertyChanging
				Me._TextColor = value
				Me.SendPropertyChanged("TextColor")
				Me.OnTextColorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RouteColor", DbType:="NVarChar(10)")>  _
	Public Property RouteColor() As String
		Get
			Return Me._RouteColor
		End Get
		Set
			If (String.Equals(Me._RouteColor, value) = false) Then
				Me.OnRouteColorChanging(value)
				Me.SendPropertyChanging
				Me._RouteColor = value
				Me.SendPropertyChanged("RouteColor")
				Me.OnRouteColorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Shape_In", DbType:="Int")>  _
	Public Property Shape_In() As System.Nullable(Of Integer)
		Get
			Return Me._Shape_In
		End Get
		Set
			If (Me._Shape_In.Equals(value) = false) Then
				Me.OnShape_InChanging(value)
				Me.SendPropertyChanging
				Me._Shape_In = value
				Me.SendPropertyChanged("Shape_In")
				Me.OnShape_InChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Shape_Out", DbType:="Int")>  _
	Public Property Shape_Out() As System.Nullable(Of Integer)
		Get
			Return Me._Shape_Out
		End Get
		Set
			If (Me._Shape_Out.Equals(value) = false) Then
				Me.OnShape_OutChanging(value)
				Me.SendPropertyChanging
				Me._Shape_Out = value
				Me.SendPropertyChanged("Shape_Out")
				Me.OnShape_OutChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.gtfs_service")>  _
Partial Public Class gtfs_service
	
	Private _Mode As String
	
	Private _Service_Id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Mode", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Mode() As String
		Get
			Return Me._Mode
		End Get
		Set
			If (String.Equals(Me._Mode, value) = false) Then
				Me._Mode = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Service_Id", DbType:="Int NOT NULL")>  _
	Public Property Service_Id() As Integer
		Get
			Return Me._Service_Id
		End Get
		Set
			If ((Me._Service_Id = value)  _
						= false) Then
				Me._Service_Id = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.RailStations")>  _
Partial Public Class RailStation
	
	Private _Station As String
	
	Private _Lat As String
	
	Private _Lon As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Station", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Station() As String
		Get
			Return Me._Station
		End Get
		Set
			If (String.Equals(Me._Station, value) = false) Then
				Me._Station = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Lat", DbType:="NVarChar(50)")>  _
	Public Property Lat() As String
		Get
			Return Me._Lat
		End Get
		Set
			If (String.Equals(Me._Lat, value) = false) Then
				Me._Lat = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Lon", DbType:="NVarChar(50)")>  _
	Public Property Lon() As String
		Get
			Return Me._Lon
		End Get
		Set
			If (String.Equals(Me._Lon, value) = false) Then
				Me._Lon = value
			End If
		End Set
	End Property
End Class
